{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAGpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEFF,EAAQ,qBAAqBH,QAAeC,OAG5CG,EAAO,oBAAoBJ,QAAeC,MAAU,GAErDA,EAAM,G,CAbbL,EAAKa,iBAAiB,UAiBtB,SAAyBC,GACvBA,EAAMC,iBAEN,MAAMC,EAAaC,OAAOjB,EAAKK,MAAMa,OAC/BC,EAAYF,OAAOjB,EAAKoB,KAAKF,OAC7BG,EAAcJ,OAAOjB,EAAKsB,OAAOJ,OAEvC,IAAK,IAAIK,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EAAG,CAGxCpB,EAAcoB,EAFAP,EAAaG,GAAaI,EAAI,IAGzCC,MAAKN,GAASpB,EAAA2B,OAAOC,QAAQR,KAC7BS,OAAMT,GAASpB,EAAA2B,OAAOG,QAAQV,I","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onCreatePromise);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(`Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        // Reject\n        reject(`Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nfunction onCreatePromise(event) {\n  event.preventDefault();\n\n  const inputDelay = Number(form.delay.value);\n  const inputStep = Number(form.step.value);\n  const inputAmount = Number(form.amount.value);\n\n  for (let i = 1; i <= inputAmount; i += 1) {\n    const delay = inputDelay + inputStep * (i - 1);\n\n    createPromise(i, delay)\n      .then(value => Notify.success(value))\n      .catch(value => Notify.failure(value));\n  }\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","inputDelay","Number","value","inputStep","step","inputAmount","amount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.c9c2ab95.js.map"}